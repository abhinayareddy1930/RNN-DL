# -*- coding: utf-8 -*-
"""GPT2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d2FpK6u0B4HiS8c_c53PmHWH2tMIKvtw
"""

!pip install transformers datasets

# -*- coding: utf-8 -*-
"""DL_ASSIGNMENT_2_QUESTION2.ipynb

Automatically generated by Colab.
"""

# Install required libraries
!pip install transformers datasets --quiet

import os
os.environ["WANDB_DISABLED"] = "true"  # Disable Weights & Biases

# Standard imports
import torch
from google.colab import files
from datasets import Dataset
from transformers import (
    GPT2Tokenizer, GPT2LMHeadModel,
    DataCollatorForLanguageModeling,
    Trainer, TrainingArguments
)

# Upload the lyrics text file
uploaded_files = files.upload()
input_file = list(uploaded_files.keys())[0]

# Read the file and clean lines
with open(input_file, "r", encoding="utf-8") as f:
    text_lines = [l.strip() for l in f if l.strip()]

# Create Hugging Face Dataset
lyrics_data = Dataset.from_dict({"text": text_lines})

# Load tokenizer and model
base_model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(base_model_name)
tokenizer.pad_token = tokenizer.eos_token  # Set pad token to EOS

model = GPT2LMHeadModel.from_pretrained(base_model_name)

# Tokenization function
def process(example):
    return tokenizer(example["text"], truncation=True, padding="max_length", max_length=128)

# Apply tokenization
processed_dataset = lyrics_data.map(process, batched=True)

# Data collator for language modeling
collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)

# Set training arguments
training_args = TrainingArguments(
    output_dir="./gpt2-lyrics-finetuned",
    num_train_epochs=3,
    per_device_train_batch_size=4,
    save_steps=200,
    logging_steps=20,
    overwrite_output_dir=True,
    save_total_limit=1,
    prediction_loss_only=True,
    logging_dir="./logs"
)

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=processed_dataset,
    tokenizer=tokenizer,
    data_collator=collator
)

# Start training
trainer.train()

# Save model and tokenizer to the specified folder
model.save_pretrained("gpt2-lyrics-finetuned")
tokenizer.save_pretrained("gpt2-lyrics-finetuned")

# Load fine-tuned model for generation
from transformers import pipeline

text_gen = pipeline("text-generation", model="gpt2-lyrics-finetuned", tokenizer="gpt2-lyrics-finetuned")

# Prompt for input
prompt_text = input("Enter your song prompt: ")

# Generate text
generated = text_gen(prompt_text, max_new_tokens=50)

# Display output
print("\n Generated Lyrics:")
print(generated[0]['generated_text'])